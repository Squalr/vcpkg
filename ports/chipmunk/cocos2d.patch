From 6cc6d7b224650392b27aab2ecca25e466994988f Mon Sep 17 00:00:00 2001
From: "Nathaniel R. Lewis" <linux.robotdude@gmail.com>
Date: Wed, 6 Feb 2019 00:12:25 -0800
Subject: [PATCH] cocos2d patchset for chipmunk

---
 include/chipmunk/chipmunk.h       |  1 +
 include/chipmunk/chipmunk_types.h | 28 +---------------------------
 include/chipmunk/cpHastySpace.h   |  6 ++++++
 include/chipmunk/cpShape.h        |  2 +-
 src/chipmunk.c                    |  2 +-
 src/cpHastySpace.c                |  8 ++++++++
 src/cpPolyline.c                  | 12 ++++++------
 7 files changed, 24 insertions(+), 35 deletions(-)

diff --git a/include/chipmunk/chipmunk.h b/include/chipmunk/chipmunk.h
index 1c204ab..d7faf03 100644
--- a/include/chipmunk/chipmunk.h
+++ b/include/chipmunk/chipmunk.h
@@ -128,6 +128,7 @@ typedef struct cpSpace cpSpace;
 #include "cpConstraint.h"
 
 #include "cpSpace.h"
+#include "cpHastySpace.h"
 
 // Chipmunk 7.0.1
 #define CP_VERSION_MAJOR 7
diff --git a/include/chipmunk/chipmunk_types.h b/include/chipmunk/chipmunk_types.h
index 0816727..7aee0c7 100644
--- a/include/chipmunk/chipmunk_types.h
+++ b/include/chipmunk/chipmunk_types.h
@@ -26,35 +26,9 @@
 #include <float.h>
 #include <math.h>
 
-#ifdef __APPLE__
-   #include "TargetConditionals.h"
-#endif
-
-// Use CGTypes by default on iOS and Mac.
-// Also enables usage of doubles on 64 bit.
-// Performance is usually very comparable when the CPU cache is well utilised.
-#if (TARGET_OS_IPHONE || TARGET_OS_MAC) && (!defined CP_USE_CGTYPES)
-	#define CP_USE_CGTYPES 1
-#endif
-
-#if CP_USE_CGTYPES
-	#if TARGET_OS_IPHONE
-		#import <CoreGraphics/CGGeometry.h>
-		#import <CoreGraphics/CGAffineTransform.h>
-	#elif TARGET_OS_MAC
-		#include <ApplicationServices/ApplicationServices.h>
-	#endif
-	
-	#if defined(__LP64__) && __LP64__
-		#define CP_USE_DOUBLES 1
-	#else
-		#define CP_USE_DOUBLES 0
-	#endif
-#endif
-
 #ifndef CP_USE_DOUBLES
 	// Use doubles by default for higher precision.
-	#define CP_USE_DOUBLES 1
+	#define CP_USE_DOUBLES 0
 #endif
 
 /// @defgroup basicTypes Basic Types
diff --git a/include/chipmunk/cpHastySpace.h b/include/chipmunk/cpHastySpace.h
index 6de2283..1cd5e8b 100644
--- a/include/chipmunk/cpHastySpace.h
+++ b/include/chipmunk/cpHastySpace.h
@@ -1,6 +1,9 @@
 // Copyright 2013 Howling Moon Software. All rights reserved.
 // See http://chipmunk2d.net/legal.php for more information.
 
+// Don't compile for Microsoft
+#ifndef _MSC_VER
+
 /// cpHastySpace is exclusive to Chipmunk Pro
 /// Currently it enables ARM NEON optimizations in the solver, but in the future will include other optimizations such as
 /// a multi-threaded solver and multi-threaded collision broadphases.
@@ -25,3 +28,6 @@ CP_EXPORT unsigned long cpHastySpaceGetThreads(cpSpace *space);
 
 /// When stepping a hasty space, you must use this function.
 CP_EXPORT void cpHastySpaceStep(cpSpace *space, cpFloat dt);
+
+// Don't compile for Microsoft
+#endif // _MSC_VER
diff --git a/include/chipmunk/cpShape.h b/include/chipmunk/cpShape.h
index cc20f80..c78ed05 100644
--- a/include/chipmunk/cpShape.h
+++ b/include/chipmunk/cpShape.h
@@ -104,7 +104,7 @@ CP_EXPORT cpBody* cpShapeGetBody(const cpShape *shape);
 CP_EXPORT void cpShapeSetBody(cpShape *shape, cpBody *body);
 
 /// Get the mass of the shape if you are having Chipmunk calculate mass properties for you.
-cpFloat cpShapeGetMass(cpShape *shape);
+CP_EXPORT cpFloat cpShapeGetMass(cpShape *shape);
 /// Set the mass of this shape to have Chipmunk calculate mass properties for you.
 CP_EXPORT void cpShapeSetMass(cpShape *shape, cpFloat mass);
 
diff --git a/src/chipmunk.c b/src/chipmunk.c
index d0ff24c..09c76bd 100644
--- a/src/chipmunk.c
+++ b/src/chipmunk.c
@@ -43,7 +43,7 @@ cpMessage(const char *condition, const char *file, int line, int isError, int is
 #define STR(s) #s
 #define XSTR(s) STR(s)
 
-const char *cpVersionString = XSTR(CP_VERSION_MAJOR)"."XSTR(CP_VERSION_MINOR)"."XSTR(CP_VERSION_RELEASE);
+const char *cpVersionString = XSTR(CP_VERSION_MAJOR) "." XSTR(CP_VERSION_MINOR) "." XSTR(CP_VERSION_RELEASE);
 
 //MARK: Misc Functions
 
diff --git a/src/cpHastySpace.c b/src/cpHastySpace.c
index a71fc33..d161e4d 100644
--- a/src/cpHastySpace.c
+++ b/src/cpHastySpace.c
@@ -1,12 +1,17 @@
 // Copyright 2013 Howling Moon Software. All rights reserved.
 // See http://chipmunk2d.net/legal.php for more information.
 
+// Don't compile for Microsoft
+#ifndef _MSC_VER
+
 #include <stdlib.h>
 #include <stdio.h>
 
 #include <pthread.h>
 //#include <sys/param.h >
+#ifdef __APPLE__
 #include <sys/sysctl.h>
+#endif
 
 #include "chipmunk/chipmunk_private.h"
 #include "chipmunk/cpHastySpace.h"
@@ -490,3 +495,6 @@ cpHastySpaceStep(cpSpace *space, cpFloat dt)
 		}
 	} cpSpaceUnlock(space, cpTrue);
 }
+
+// Don't compile for Microsoft
+#endif //_MSC_VER
diff --git a/src/cpPolyline.c b/src/cpPolyline.c
index 2be7e1a..8592fc1 100644
--- a/src/cpPolyline.c
+++ b/src/cpPolyline.c
@@ -49,7 +49,7 @@ static cpPolyline *
 cpPolylineShrink(cpPolyline *line)
 {
 	line->capacity = line->count;
-	return cprealloc(line, cpPolylineSizeForCapacity(line->count));
+	return (cpPolyline*)cprealloc(line, cpPolylineSizeForCapacity(line->count));
 }
 
 void
@@ -69,7 +69,7 @@ cpPolylineGrow(cpPolyline *line, int count)
   
   if(line->capacity < capacity){
     line->capacity = capacity;
-		line = cprealloc(line, cpPolylineSizeForCapacity(capacity));
+		line = (cpPolyline*)cprealloc(line, cpPolylineSizeForCapacity(capacity));
   }
 	
 	return line;
@@ -244,7 +244,7 @@ cpPolylineSetInit(cpPolylineSet *set)
 {
 	set->count = 0;
 	set->capacity = 8;
-	set->lines = cpcalloc(set->capacity, sizeof(cpPolyline));
+	set->lines = (cpPolyline**)cpcalloc(set->capacity, sizeof(cpPolyline));
 	
   return set;
 }
@@ -313,7 +313,7 @@ cpPolylineSetPush(cpPolylineSet *set, cpPolyline *line)
   set->count++;
   if(set->count > set->capacity){
     set->capacity *= 2;
-    set->lines = cprealloc(set->lines, set->capacity*sizeof(cpPolyline));
+    set->lines = (cpPolyline**)cprealloc(set->lines, set->capacity*sizeof(cpPolyline));
   }
   
 	set->lines[set->count - 1] = line;
@@ -599,7 +599,7 @@ static void
 ApproximateConcaveDecomposition(cpVect *verts, int count, cpFloat tol, cpPolylineSet *set)
 {
 	int first;
-	cpVect *hullVerts = alloca(count*sizeof(cpVect));
+	cpVect *hullVerts = (cpVect*)alloca(count*sizeof(cpVect));
 	int hullCount = cpConvexHull(count, verts, hullVerts, &first, 0.0);
 	
 	if(hullCount != count){
@@ -615,7 +615,7 @@ ApproximateConcaveDecomposition(cpVect *verts, int count, cpFloat tol, cpPolylin
 				// Vertex counts NOT including the steiner point.
 				int sub1_count = (steiner_i - notch.i + count)%count + 1;
 				int sub2_count = count - (steiner_i - notch.i + count)%count;
-				cpVect *scratch = alloca((IMAX(sub1_count, sub2_count) + 1)*sizeof(cpVect));
+				cpVect *scratch = (cpVect*)alloca((IMAX(sub1_count, sub2_count) + 1)*sizeof(cpVect));
 				
 				for(int i=0; i<sub1_count; i++) scratch[i] = verts[(notch.i + i)%count];
 				scratch[sub1_count] = steiner;
-- 
2.14.1.windows.1

